/*globals define, _, WebGMEGlobal*/
/*jshint browser: true*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Thu May 11 2017 10:42:38 GMT-0700 (PDT).
 */

define([
    'js/PanelBase/PanelBaseWithHeader',
    'js/PanelManager/IActivePanel',
    'widgets/HFSMViz/HFSMVizWidget',
    './HFSMVizControl'
], function (
    PanelBaseWithHeader,
    IActivePanel,
    HFSMVizWidget,
    HFSMVizControl
) {
    'use strict';

    var HFSMVizPanel;

    HFSMVizPanel = function (layoutManager, params) {
        var options = {};
        //set properties from options
        options[PanelBaseWithHeader.OPTIONS.LOGGER_INSTANCE_NAME] = 'HFSMVizPanel';
        options[PanelBaseWithHeader.OPTIONS.FLOATING_TITLE] = true;

        //call parent's constructor
        PanelBaseWithHeader.apply(this, [options, layoutManager]);

        this._client = params.client;

        //initialize UI
        this._initialize();

        this.logger.debug('ctor finished');
    };

    //inherit from PanelBaseWithHeader
    _.extend(HFSMVizPanel.prototype, PanelBaseWithHeader.prototype);
    _.extend(HFSMVizPanel.prototype, IActivePanel.prototype);

    HFSMVizPanel.prototype._initialize = function () {
        var self = this;

        //set Widget title
        this.setTitle('');

        this.widget = new HFSMVizWidget(this.logger, this.$el, this._client);

        this.widget.setTitle = function (title) {
            self.setTitle(title);
        };

        this.control = new HFSMVizControl({
            logger: this.logger,
            client: this._client,
            widget: this.widget
        });

        this.onActivate();
    };

    /* OVERRIDE FROM WIDGET-WITH-HEADER */
    /* METHOD CALLED WHEN THE WIDGET'S READ-ONLY PROPERTY CHANGES */
    HFSMVizPanel.prototype.onReadOnlyChanged = function (isReadOnly) {
        //apply parent's onReadOnlyChanged
        PanelBaseWithHeader.prototype.onReadOnlyChanged.call(this, isReadOnly);

    };

    HFSMVizPanel.prototype.onResize = function (width, height) {
        this.logger.debug('onResize --> width: ' + width + ', height: ' + height);
        this.widget.onWidgetContainerResize(width, height);
    };

    var validGUIDs = [
        "1580d9b2-6093-84f0-06ec-858980294d65",
        "f8fc18e6-db54-3cf1-51e5-df2a7693628f",
        "682bbfe9-48c6-9de0-2a45-3315bca7c7cf", // state
        "fdc4b7d9-d5ab-37e0-e33e-abc99464fba6",
        "f848f280-919c-deaa-9b57-06064ee66de4",
        "e723b314-48ed-60f4-f398-d0ace680c118",
        "24205425-8e9f-c762-0b76-84c08809e1e6",

        "9d05629e-8ada-4efc-58b1-3f5d315c3a1e", // internal transition
    ];

    var stateGUID = validGUIDs[2];

    /* * * * * * * * Tells part browser what to show * * * * * * * */
    HFSMVizPanel.prototype.getValidTypesInfo = function( nodeId ) {
        var client = this._client;
	var node = this._client.getNode( nodeId );
	if (node) {
	    var detailedTypes = {};

	    var t = node.getValidChildrenTypesDetailed( );
	    Object.keys(t).map(function(k) {
                var n = client.getNode(k);
                var guid = null;
                try {
                    guid = n.getLibraryGuid();
                }
                catch (e) {
                    guid = n.getGuid();
                }
                if (validGUIDs.indexOf(guid) > -1)
                    detailedTypes[k] = true;

                if (guid == stateGUID) {
                    // get internal transition
                    var c = n.getValidChildrenTypesDetailed();
                    Object.keys(c).map(function(key) {
                        var n2 = client.getNode(key);
                        var guid2 = null;
                        try {
                            guid2 = n2.getLibraryGuid();
                        }
                        catch (e) {
                            guid2 = n2.getGuid();
                        }
                        if (validGUIDs.indexOf(guid2) > -1)
                            detailedTypes[key] = true;
                    });
                }
	    });

	    // is there a way to not have to hard-code this?
            /*
	    detailedTypes[ '/615025579/i' ] = true; // Documentation
	    detailedTypes[ '/615025579/x' ] = true; // internal transition
	    detailedTypes['/615025579/1242097160'] = true; // initial state
	    detailedTypes['/615025579/A'] = true; // end state
	    detailedTypes['/615025579/R'] = true; // choice pseudostate
	    detailedTypes['/615025579/e'] = true; // deep history pseudostate
	    detailedTypes['/615025579/K'] = true; // shallow history pseudostate
	    detailedTypes['/615025579/1416392928'] = true; // state
            */
	    return detailedTypes;
	}
	else {
	    return {};
	}
    };
    
    /* * * * * * * * Toolbar related Functions       * * * * * * * */

    HFSMVizPanel.prototype.getSplitPanelToolbarEl = function() {
        this._splitPanelToolbarEl = IActivePanel.prototype.getSplitPanelToolbarEl.call(this);
        // Set the size bigger than 40 x 40 and add some padding for the scroll-bar.
        this._splitPanelToolbarEl.css({
            'padding-right': '10px'
        });
        this.widget._addSplitPanelToolbarBtns(this._splitPanelToolbarEl);
        return this._splitPanelToolbarEl;
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    HFSMVizPanel.prototype.destroy = function () {
        this.control.destroy();
        this.widget.destroy();

        PanelBaseWithHeader.prototype.destroy.call(this);
        WebGMEGlobal.KeyboardManager.setListener(undefined);
    };

    HFSMVizPanel.prototype.onActivate = function () {
        this.widget.onActivate();
        this.control.onActivate();
        WebGMEGlobal.KeyboardManager.setListener(this.widget);
    };

    HFSMVizPanel.prototype.onDeactivate = function () {
        this.widget.onDeactivate();
        this.control.onDeactivate();
        WebGMEGlobal.KeyboardManager.setListener(undefined);
    };

    return HFSMVizPanel;
});
