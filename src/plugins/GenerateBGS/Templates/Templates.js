/* Generated file based on ejs templates */
define([], function() {
    return {
    "script.bgs.ejs": "/** @file    <%- compInfo.name %>.hpp \n *  @author  <%- compInfo.Authors %>\n *  @date    <%= moment().format() %>\n *  @brief   This file declares the <%- compInfo.name %> class; <%- compInfo['Brief Description'] %>\n */\n\n#ifndef CLIENT_HPP\n#define CLIENT_HPP\n#include \"node/Component.hpp\"\n\n/**\n * Component Message and Service Headers\n */\n<%\nif (compInfo.Types.length) {\n  compInfo.Types.map(function(type) {\n-%>\n#include \"<%- objects[type.parentPath].name %>/<%- type.name %>.h\"\n<%\n    });\n }\n-%>\n\n#ifdef USE_ROSMOD\n  #include \"rosmod/rosmod_ros.h\"\n#else\n  #ifdef USE_ROSCPP\n    #include \"ros/ros.h\"\n  #endif\n#endif\n\n/**\n * Forward declarations\n */\n//::::<%- compInfo.path %>::::Forwards::::\n<%- compInfo.Forwards %>\n\n/**\n * @brief <%- compInfo.name %> class\n */\nclass <%- compInfo.name %> : public Component\n{\npublic:\n  /**\n   * @brief <%- compInfo.name %> Constructor.\n   * @param _config Component configuration parsed from deployment JSON\n   */\n  <%- compInfo.name %>(Json::Value& _config)\n  : Component(_config) {}\n\n  /**\n   * @brief <%- compInfo.name %> Initializer\n   * This operation is executed immediately after startup.\n   * @param[in] event a oneshot timer event\n   * @see startUp()\n   */\n  void init_timer_operation(const NAMESPACE::TimerEvent& event);\n\n<%\nif (compInfo.Timer_list) {\n  compInfo.Timer_list.map(function(tmr) {\n-%>\n  /**\n   * @brief <%- tmr.name %>_operation; <%- tmr['Brief Description'] %>\n   *\n   * This operation is executed every time the  \n   * <%- tmr.name %> operation request is serviced \n   * @param[in] event a timer event\n   *\n   * <%- tmr['Detailed Description'] %>\n   */\n  void <%- tmr.name %>_operation(const NAMESPACE::TimerEvent& event);\n<%\n    });\n }\n-%>\n\n<%\nif (compInfo.Subscriber_list) {\n  compInfo.Subscriber_list.map(function(sub) {\n-%>\n  /**\n   * @brief <%- sub.name %>_operation; <%- sub['Brief Description'] %>\n   *\n   * This operation is executed every time the  \n   * <%- sub.name %> operation request is serviced \n   * @param[in] received_data message received by the component subscriber\n   *\n   * <%- sub['Detailed Description'] %>\n   */\n  void <%- sub.name %>_operation(const <%- objects[sub.Message.parentPath].name %>::<%- sub.Message.name %>::ConstPtr& received_data);\n<%\n    });\n }\n-%>\n\n<%\nif (compInfo.Server_list) {\n  compInfo.Server_list.map(function(srv) {\n-%>\n  /**\n   * @brief <%- srv.name %>_operation; <%- srv['Brief Description'] %>\n   *\n   * This operation is executed every time the  \n   * <%- srv.name %> operation request is serviced \n   * @param[in] req request received from the client\n   * @param[out] res response sent back to the client\n   *\n   * <%- srv['Detailed Description'] %>\n   */\n  bool <%- srv.name %>_operation(const <%- objects[srv.Service.parentPath].name %>::<%- srv.Service.name %>::Request &req, <%- objects[srv.Service.parentPath].name %>::<%- srv.Service.name %>::Response &res);\n<%\n    });\n }\n-%>\n\n /**\n   * @brief Component startup function\n   *\n   * This function configures all the component ports and timers\n   */ \n  void startUp();\n\n /**\n   * @brief <%- compInfo.name %> Destructor\n   */ \n  ~<%- compInfo.name %>();\n\nprivate:\n\n<%\nif (compInfo.Timer_list) {\n  compInfo.Timer_list.map(function(tmr) {\n-%>\n  NAMESPACE::Timer <%- tmr.name %>;  /*!< <%- tmr.name %> Component Timer */\n<%\n    });\n }\n-%>\n<%\nif (compInfo.Server_list) {\n  compInfo.Server_list.map(function(srv) {\n-%>\n  NAMESPACE::ServiceServer <%- srv.name %>;  /*!< <%- srv.name %> Component Server */\n<%\n    });\n }\n-%>\n<%\nif (compInfo.Client_list) {\n  compInfo.Client_list.map(function(clt) {\n -%>\n  NAMESPACE::ServiceClient <%- clt.name %>;  /*!< <%- clt.name %> Component Client */\n<%\n    });\n }\n-%>\n<%\nif (compInfo.Publisher_list) {\n  compInfo.Publisher_list.map(function(pub) {\n -%>\n  NAMESPACE::Publisher <%- pub.name %>;  /*!< <%- pub.name %> Component Publisher */\n<%\n    });\n }\n-%>\n<%\nif (compInfo.Subscriber_list) {\n  compInfo.Subscriber_list.map(function(sub) {\n -%>\n  NAMESPACE::Subscriber <%- sub.name %>;  /*!< <%- sub.name %> Component Subscriber */\n<%\n    });\n }\n-%>\n\n  /** \n   * User-defined private variables\n   */\n  //::::<%- compInfo.path %>::::Members::::\n  <%- compInfo.Members %>\n};\n\n#endif\n\n"
}});