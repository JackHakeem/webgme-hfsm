case {{{name}}}:
  if ( false ) {  // makes generation easier :)
  }
  {{#Transitions}}
  {{#Guard}}
  else if ( {{{Guard}}} ) {
    {{#finalState.isChoice}}
    // Going into a choice pseudo-state, let it handle its
    // guards and perform the state transition
    handled = {{{finalState.fullyQualifiedVariableName}}}->handleChoice( activeLeaf );
    {{/finalState.isChoice}}
    {{^finalState.isChoice}}
    // We are going into either a regular state, deep history
    // state, or a shallow history state, just need to make
    // the right state active, run the exit()s, Action, and
    // entry()s

    // set the new active state
    {{{finalState.fullyQualifiedVariableName}}}->makeActive();
    // call the exit() function for the old state
    activeLeaf->exit();
    // run the transition function (s)
    {{{trans.transitionFunc}}}
    // call the entry() function for the new branch from the
    // common parent's new active child
    {{{newBranchRoot}}}->entry();
    // make sure nothing else handles this event
    handled = true;
    {{/finalState.isChoice}}
  }
  {{/Guard}}
  {{^Guard}}
  else if ( true ) {
    {{#finalState.isChoice}}
    // Going into a choice pseudo-state, let it handle its
    // guards and perform the state transition
    handled = {{{finalState.fullyQualifiedVariableName}}}->handleChoice( activeLeaf );
    {{/finalState.isChoice}}
    {{^finalState.isChoice}}
    // We are going into either a regular state, deep history
    // state, or a shallow history state, just need to make
    // the right state active, run the exit()s, Action, and
    // entry()s

    // set the new active state
    {{{finalState.fullyQualifiedVariableName}}}->makeActive();
    // call the exit() function for the old state
    activeLeaf->exit();
    // run the transition function (s)
    {{{trans.transitionFunc}}}
    // call the entry() function for the new branch from the
    // common parent's new active child
    {{{newBranchRoot}}}->entry();
    // make sure nothing else handles this event
    handled = true;
    {{/finalState.isChoice}}
  }
  {{/Guard}}
  {{/Transitions}}
  break;
